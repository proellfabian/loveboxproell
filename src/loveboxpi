#!/usr/bin/env -S python3 -u

from socketserver import ThreadingMixIn
from http.server import SimpleHTTPRequestHandler, HTTPServer
import re
import cgi
import json
import threading
import os
import sys
import mimetypes
import urllib
import traceback
import RPi.GPIO as GPIO
import lovebox.config
import lovebox.controller

class HTTPRequestHandler(SimpleHTTPRequestHandler):
	def do_POST(self):
		global _controller
		if re.search('/api/v1/cmd', self.path):
			ctype = cgi.parse_header(self.headers.get('content-type'))
			if ctype[0] == 'application/json':
				length = int(self.headers.get('content-length'))
				data = self.rfile.read(length).decode('utf8')
				jsonData = json.loads(data)
				
				cmd = jsonData["cmd"].lower()
				if cmd == "test" and _controller.test():
					self.send_response(200)
				elif cmd == "restart":
					def server_shutdown():
						self.server.shutdown()
					# must be called in another thread to avoid deadlock
					threading.Thread(target=server_shutdown).start()
					self.send_response(200)
				else:
					self.send_response(500)
			else:
				self.send_response(400, "Bad Request: no data provided")
		elif re.search('/api/v1/cloud', self.path):
			ctype = cgi.parse_header(self.headers.get('content-type'))
			if ctype[0] == 'application/json':
				length = int(self.headers.get('content-length'))
				data = self.rfile.read(length).decode('utf8')
				jsonData = json.loads(data)
				
				if _controller.cloud.execute(jsonData):
					self.send_response(200)
				else:
					self.send_response(500)
			else:
				self.send_response(400, "Bad Request: no data provided")
		elif re.search('/api/v1/settings', self.path):
			ctype = cgi.parse_header(self.headers.get('content-type'))
			if ctype[0] == 'application/json':
				length = int(self.headers.get('content-length'))
				data = self.rfile.read(length).decode('utf8')
				
				if lovebox.config.writeSettingsJSON(data):
					_controller.update()
					self.send_response(200)
				else:
					self.send_response(500)
			else:
				self.send_response(400, "Bad Request: no data provided")
		elif re.search('/api/v1/message', self.path):
			ctype = cgi.parse_header(self.headers.get('content-type'))
			if ctype[0].startswith('application/x-www-form-urlencoded'):
				formdata = cgi.FieldStorage(
					fp=self.rfile,
					headers=self.headers,
					environ={'REQUEST_METHOD': 'POST', 'CONTENT_TYPE': self.headers['Content-Type']}
				)
				
				imageData64 = formdata["image"].value
				_controller.setMessage( imageData64 )
				
				self.send_response(200)
			else:
				self.send_response(400, "Bad Request: unexpected content type")
		else:
			self.send_response(403)
		
		self.end_headers()
	
	def do_GET(self):
		global _controller
		if re.search('/api/v1/info', self.path):
			self.send_response(200)
			self.send_header('Content-Type', 'application/json')
			self.end_headers()
			data = _controller.getInfoJSON()
			self.wfile.write( data.encode('utf8') )
		elif re.search('/api/v1/message', self.path):
			self.send_response(200)
			self.send_header('Content-Type', 'application/json')
			self.end_headers()
			data = _controller.getLastMessageInfoJSON()
			self.wfile.write( data.encode('utf8') )
		elif re.search('/api/v1/settings', self.path):
			self.send_response(200)
			self.send_header('Content-Type', 'application/json')
			self.end_headers()
			data = lovebox.config.readSettingsJSON()
			self.wfile.write( data.encode('utf8') )
		else:
			super().do_GET() # let SimpleHTTPRequestHandler serve the files 
	
	def do_DELETE(self):
		global _controller
		if re.search('/api/v1/message', self.path):
			if _controller.clearMessage():
				self.send_response(200)
			else:
				self.send_response(500)
		else:
			self.send_response(403)
		self.end_headers()

class ThreadedHTTPServer(ThreadingMixIn, HTTPServer):
	"""Handle requests in a separate thread."""

def main():
	version = '0.0.0'
	dir = os.path.abspath(os.path.dirname(__file__))
	if os.path.isfile(dir+"/VERSION"):
		f = open(dir+"/VERSION", "r")
		version = f.readline()
		f.close()
	
	global _controller
	_controller = lovebox.controller.Controller(version)
	
	host = lovebox.config.readSetting("www","host")
	port = int(lovebox.config.readSetting("www","port"))
	
	os.chdir(dir+'/www')
	
	server = HTTPServer((host, port), HTTPRequestHandler)
	print('LoveboxPi (v'+ version +') HTTP Server running on ' + host + ':' + str(port))
	server.serve_forever()

if __name__ == '__main__':
	#GPIO.setwarnings(False) # ignore warnings
	try:
		main()
	except KeyboardInterrupt:
		print("Shutdown requested.")
	except Exception:
		traceback.print_exc(file=sys.stdout)
	
	print('Exiting...')
	
	global _controller
	_controller.cleanup()
	_controller = None
	GPIO.cleanup()
